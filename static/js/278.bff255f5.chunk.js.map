{"version":3,"file":"static/js/278.bff255f5.chunk.js","mappings":"4LAeA,EAbe,WACX,OAAO,SAAC,KAAD,CACPA,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAGC,QAAS,OAAQC,eAAgB,UAClDC,iBAAiB,GACjBC,SAAS,GAEV,C,qFCcH,EAtBmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,GACCA,EAAOG,KAAI,SAAAC,GAAK,OACd,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,SAA6DG,EAAMK,SAD5DL,EAAME,GADD,KAOvB,C,2HCwCD,UAnDe,WACX,OAA0BI,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAee,EAAf,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,CAAC,GAAzD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SA2BtC,OApBFC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGE,IAAMG,EAAe,mCAAG,2FACpBR,GAAW,GADS,mBAGGS,EAAAA,EAAAA,IAAaJ,GAHhB,OAGdK,EAHc,OAIpBT,EAAUS,GAJU,gDAOlBZ,EAAS,EAAD,IAPU,yBAUlBE,GAAW,GAVO,4EAAH,qDAazBQ,GAdC,CAeA,GAAE,CAACH,KAGA,4BACE,kBAAMM,SA3BqB,SAAAC,GAC7BA,EAAMC,iBACNT,EAAgB,CAAEU,MAAOF,EAAMG,OAAOC,SAASF,MAAMG,MAAMC,eAC5D,EAwBG,WACE,kBACEC,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,mBAAQJ,KAAK,SAAb,uBAEHtB,IAAS,2DACTE,IAAW,SAAC,IAAD,IACXb,IAAU,SAAC,IAAD,CAAYA,OAAQA,MAGlC,C,8LCtDKsC,EAAM,mCACNC,EAAY,gCAELC,EAAgB,mCAAG,oGACLC,EAAAA,GAAAA,IAAA,UAAaF,EAAb,sCAAoDD,IAD/C,cACtBI,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,qDAKhBrB,EAAY,mCAAG,WAAMK,GAAN,uFACDa,EAAAA,GAAAA,IAAA,UAAaF,EAAb,gCAA8CD,EAA9C,iCAA0EV,EAA1E,gCADC,cAClBc,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,sDAKZC,EAAe,mCAAG,WAAMC,GAAN,uFACJL,EAAAA,GAAAA,IAAA,UAAaF,EAAb,iBAA+BO,EAA/B,oBAAkDR,EAAlD,oBADI,cACrBI,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,sDAKfI,EAAY,mCAAG,WAAMD,GAAN,uFACDL,EAAAA,GAAAA,IAAA,UAAaF,EAAb,iBAA+BO,EAA/B,4BAA0DR,EAA1D,oBADC,cAClBI,EADkB,yBAEjBA,EAASC,KAAKK,MAFG,2CAAH,sDAKZC,EAAe,mCAAG,WAAMH,GAAN,uFACJL,EAAAA,GAAAA,IAAA,UAAaF,EAAb,iBAA+BO,EAA/B,4BAA0DR,EAA1D,2BADI,cACrBI,EADqB,yBAEpBA,EAASC,KAAKC,SAFM,2CAAH,qD","sources":["components/Loader/Loader.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","services/fetchMovies.js"],"sourcesContent":["import { ThreeDots } from  'react-loader-spinner';\n\nconst Loader = ( ) => {\n    return <ThreeDots\n    height=\"80\" \n    width=\"80\" \n    radius=\"9\"\n    color=\"#0a6344\" \n    ariaLabel=\"three-dots-loading\"\n    wrapperStyle={{  display: 'flex', justifyContent: 'center' }}\n    wrapperClassName=\"\"\n    visible={true}\n     />\n  };\n  \nexport default Loader;","import PropTypes from 'prop-types';\n// import css from './Movies.module.css';\nimport { useLocation, Link } from 'react-router-dom';\n\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies &&\n        movies.map(movie => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>{movie.title}</Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\nmovies: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n})),\n};\n\nexport default MoviesList;","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from '../../services/fetchMovies';\n\nimport Loader from '../../components/Loader';\nimport MoviesList from '../../components/MoviesList';\n\nconst Movies = () => {\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams({});\n    const searchName = searchParams.get('query');\n \n  const handleSearchFormSubmit = event => {\n    event.preventDefault();\n    setSearchParams({ query: event.target.elements.query.value.toLowerCase() });\n  };\n    \nuseEffect(() => {\n  if (!searchName) {\n    return;\n}\n    const searchNewMovies = async () => {\n        setLoading(true);\n        try {\n        const newQuery = await searchMovies(searchName);\n        setMovies(newQuery);\n        }\n        catch (error) {\n          setError(error);\n        }\n        finally {\n          setLoading(false);\n        }\n}\nsearchNewMovies();\n}, [searchName]);\n\n  return (\n    <div>\n      <form onSubmit={handleSearchFormSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    {error && <p>Whoops, something went wrong...</p>}\n    {loading && <Loader />}\n    {movies && <MoviesList movies={movies}/>}\n    </div>\n  );\n};\n\nexport default Movies;","import axios from 'axios';\n\nconst KEY = '93fca4687d78764c2a220d92f59e9e96';\nconst BASIC_URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovie = async () => {\n    const response = await axios.get(`${BASIC_URL}trending/movie/day?api_key=${KEY}`);\n    return response.data.results;\n};\n\nexport const searchMovies = async query => {\n    const response = await axios.get(`${BASIC_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n    return response.data.results;\n};\n  \nexport const getMovieDetails = async movieId => {\n    const response = await axios.get(`${BASIC_URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n    return response.data;\n};\n\nexport const getMovieCast = async movieId => {\n    const response = await axios.get(`${BASIC_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n    return response.data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n    const response = await axios.get(`${BASIC_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`);\n    return response.data.results;\n};"],"names":["height","width","radius","color","ariaLabel","wrapperStyle","display","justifyContent","wrapperClassName","visible","movies","location","useLocation","map","movie","to","id","state","from","title","useState","error","setError","loading","setLoading","setMovies","useSearchParams","searchParams","setSearchParams","searchName","get","useEffect","searchNewMovies","searchMovies","newQuery","onSubmit","event","preventDefault","query","target","elements","value","toLowerCase","type","name","autoComplete","autoFocus","placeholder","KEY","BASIC_URL","getTrendingMovie","axios","response","data","results","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}